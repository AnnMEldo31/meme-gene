[{"C:\\Users\\annma\\meme-gene\\src\\index.js":"1","C:\\Users\\annma\\meme-gene\\src\\serviceWorker.js":"2","C:\\Users\\annma\\meme-gene\\src\\Meme\\Meme.js":"3","C:\\Users\\annma\\meme-gene\\src\\MemeGenerated\\MemeGenerated.js":"4","C:\\Users\\annma\\meme-gene\\src\\App.js":"5","C:\\Users\\annma\\Documents\\GitHub\\meme-gene\\WebApp\\src\\index.js":"6","C:\\Users\\annma\\Documents\\GitHub\\meme-gene\\WebApp\\src\\App.js":"7","C:\\Users\\annma\\Documents\\GitHub\\meme-gene\\WebApp\\src\\serviceWorker.js":"8","C:\\Users\\annma\\Documents\\GitHub\\meme-gene\\WebApp\\src\\MemeGenerated\\MemeGenerated.js":"9","C:\\Users\\annma\\Documents\\GitHub\\meme-gene\\WebApp\\src\\Meme\\Meme.js":"10"},{"size":610,"mtime":1641647605961,"results":"11","hashOfConfig":"12"},{"size":5085,"mtime":1641614270338,"results":"13","hashOfConfig":"12"},{"size":2620,"mtime":1641647884733,"results":"14","hashOfConfig":"12"},{"size":1040,"mtime":1641647901725,"results":"15","hashOfConfig":"12"},{"size":401,"mtime":1641647803741,"results":"16","hashOfConfig":"12"},{"size":610,"mtime":1641647605961,"results":"17","hashOfConfig":"18"},{"size":401,"mtime":1641647803741,"results":"19","hashOfConfig":"18"},{"size":5085,"mtime":1641614270338,"results":"20","hashOfConfig":"18"},{"size":996,"mtime":1641647953175,"results":"21","hashOfConfig":"18"},{"size":2620,"mtime":1641647884733,"results":"22","hashOfConfig":"18"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vnxx6e",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15fw705",{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},"C:\\Users\\annma\\meme-gene\\src\\index.js",[],"C:\\Users\\annma\\meme-gene\\src\\serviceWorker.js",[],["45","46"],"C:\\Users\\annma\\meme-gene\\src\\Meme\\Meme.js",["47"],"C:\\Users\\annma\\meme-gene\\src\\MemeGenerated\\MemeGenerated.js",[],"C:\\Users\\annma\\meme-gene\\src\\App.js",[],"C:\\Users\\annma\\Documents\\GitHub\\meme-gene\\WebApp\\src\\index.js",[],"C:\\Users\\annma\\Documents\\GitHub\\meme-gene\\WebApp\\src\\App.js",[],"C:\\Users\\annma\\Documents\\GitHub\\meme-gene\\WebApp\\src\\serviceWorker.js",[],"C:\\Users\\annma\\Documents\\GitHub\\meme-gene\\WebApp\\src\\MemeGenerated\\MemeGenerated.js",[],"C:\\Users\\annma\\Documents\\GitHub\\meme-gene\\WebApp\\src\\Meme\\Meme.js",["48"],"import React, { useEffect, useState } from 'react';\r\nimport styles from './styles.module.css';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport const Meme = () => {\r\n\r\n    const [memes, setMemes] = useState([]);\r\n    const [memeIndex, setMemeIndex] = useState(0);\r\n    const [captions, setCaptions] = useState([]);\r\n\r\n    const history = useNavigate();\r\n    \r\n    const updateCaption = (e, index) => {\r\n        const text = e.target.value || '';\r\n        setCaptions(\r\n            captions.map((c, i) => {\r\n                if(index === i) {\r\n                    return text;\r\n                } else {\r\n                    return c;\r\n                }\r\n            })\r\n        );\r\n    };\r\n\r\n    const generateMeme = () => {\r\n        const currentMeme = memes[memeIndex];\r\n        const formData = new FormData();\r\n\r\n        formData.append('username', 'AnnMaryEldo');\r\n        formData.append('password', 'memegene666');\r\n        formData.append('template_id', currentMeme.id);\r\n        captions.forEach((c, index) => formData.append(`boxes[${index}][text]`, c));\r\n\r\n        fetch('https://api.imgflip.com/caption_image', {\r\n            method: 'POST', \r\n            body: formData\r\n        }).then(res => {\r\n            res.json().then(res => {\r\n                history(`/generated?url=${res.data.url}`);\r\n            });\r\n        });\r\n    };\r\n\r\n\r\n    const shuffleMemes = (array) => {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n          const j = Math.floor(Math.random() * i);\r\n          const temp = array[i];\r\n          array[i] = array[j];\r\n          array[j] = temp;\r\n        }\r\n      };    \r\n\r\n    useEffect(() => {\r\n        fetch('https://api.imgflip.com/get_memes').then(res => {\r\n            res.json().then(res => {\r\n                const _memes = res.data.memes;\r\n                shuffleMemes(_memes);\r\n                setMemes(_memes);\r\n            });\r\n        });\r\n    }, []); \r\n\r\n    useEffect(() => {\r\n        if(memes.length){\r\n            setCaptions(Array(memes[memeIndex].box_count).fill(''));\r\n        }\r\n    }, [memeIndex, memes]);\r\n\r\n  return (\r\n    memes.length ? \r\n    <div className={styles.container}>\r\n        {\r\n            captions.map((c, index) => (\r\n                <input onChange={(e) => updateCaption(e, index)} key = {index} />\r\n            ))\r\n        }\r\n        <button onClick={generateMeme} className={styles.generate}>Generate</button>\r\n        <button onClick={()=> setMemeIndex(memeIndex + 1)} className={styles.skip}>Skip</button>    \r\n        <img className={styles.imgcontainer} src={memes[memeIndex].url} />\r\n    </div> : <p>Jello</p> \r\n  );\r\n}\r\n\r\n",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":81,"column":9,"nodeType":"55","endLine":81,"endColumn":75},{"ruleId":"53","severity":1,"message":"54","line":81,"column":9,"nodeType":"55","endLine":81,"endColumn":75},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]