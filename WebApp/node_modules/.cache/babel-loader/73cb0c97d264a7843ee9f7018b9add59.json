{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\annma\\\\meme-gene\\\\src\\\\Meme\\\\Meme.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport styles from './styles.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Meme = () => {\n  _s();\n\n  const [memes, setMemes] = useState([]);\n  const [memeIndex, setMemeIndex] = useState(0);\n  const [captions, setCaptions] = useState([]);\n\n  const updateCaption = (e, index) => {\n    const text = e.target.value || '';\n    setCaptions(captions.map((c, i) => {\n      if (index === i) {\n        return text;\n      } else {\n        return c;\n      }\n    }));\n  };\n\n  const shuffleMemes = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  useEffect(() => {\n    fetch('https://api.imgflip.com/get_memes').then(res => {\n      res.json().then(res => {\n        const _memes = res.data.memes;\n        shuffleMemes(_memes);\n        setMemes(_memes);\n      });\n    });\n  }, []);\n  useEffect(() => {\n    if (memes.length) {\n      setCaptions(Array(memes[memeIndex].box_count).fill(''));\n    }\n  }, [memeIndex, memes]);\n  useEffect(() => {\n    console.log(captions);\n  }, [captions]);\n  return memes.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log('GENERATE'),\n      className: styles.generate,\n      children: \"Generate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setMemeIndex(memeIndex + 1),\n      className: styles.skip,\n      children: \"Skip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), captions.map((c, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => updateCaption(e, index)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: memes[memeIndex].url\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(Meme, \"czkSf8QiotT4+GSSYioNoRUfk9c=\");\n\n_c = Meme;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"sources":["C:/Users/annma/meme-gene/src/Meme/Meme.js"],"names":["React","useEffect","useState","styles","Meme","memes","setMemes","memeIndex","setMemeIndex","captions","setCaptions","updateCaption","e","index","text","target","value","map","c","i","shuffleMemes","array","length","j","Math","floor","random","temp","fetch","then","res","json","_memes","data","Array","box_count","fill","console","log","container","generate","skip","url"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;;AAEA,OAAO,MAAMC,IAAI,GAAG,MAAM;AAAA;;AAEtB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;;AAEA,QAAMS,aAAa,GAAG,CAACC,CAAD,EAAIC,KAAJ,KAAc;AAChC,UAAMC,IAAI,GAAGF,CAAC,CAACG,MAAF,CAASC,KAAT,IAAkB,EAA/B;AACAN,IAAAA,WAAW,CACPD,QAAQ,CAACQ,GAAT,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACnB,UAAGN,KAAK,KAAKM,CAAb,EAAgB;AACZ,eAAOL,IAAP;AACH,OAFD,MAEO;AACH,eAAOI,CAAP;AACH;AACJ,KAND,CADO,CAAX;AASH,GAXD;;AAaA,QAAME,YAAY,GAAIC,KAAD,IAAW;AAC5B,SAAK,IAAIF,CAAC,GAAGE,KAAK,CAACC,MAAN,GAAe,CAA5B,EAA+BH,CAAC,GAAG,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACzC,YAAMI,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBP,CAA3B,CAAV;AACA,YAAMQ,IAAI,GAAGN,KAAK,CAACF,CAAD,CAAlB;AACAE,MAAAA,KAAK,CAACF,CAAD,CAAL,GAAWE,KAAK,CAACE,CAAD,CAAhB;AACAF,MAAAA,KAAK,CAACE,CAAD,CAAL,GAAWI,IAAX;AACD;AACF,GAPH;;AASA1B,EAAAA,SAAS,CAAC,MAAM;AACZ2B,IAAAA,KAAK,CAAC,mCAAD,CAAL,CAA2CC,IAA3C,CAAgDC,GAAG,IAAI;AACnDA,MAAAA,GAAG,CAACC,IAAJ,GAAWF,IAAX,CAAgBC,GAAG,IAAI;AACnB,cAAME,MAAM,GAAGF,GAAG,CAACG,IAAJ,CAAS5B,KAAxB;AACAe,QAAAA,YAAY,CAACY,MAAD,CAAZ;AACA1B,QAAAA,QAAQ,CAAC0B,MAAD,CAAR;AACH,OAJD;AAKH,KAND;AAOH,GARQ,EAQN,EARM,CAAT;AAUA/B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGI,KAAK,CAACiB,MAAT,EAAgB;AACZZ,MAAAA,WAAW,CAACwB,KAAK,CAAC7B,KAAK,CAACE,SAAD,CAAL,CAAiB4B,SAAlB,CAAL,CAAkCC,IAAlC,CAAuC,EAAvC,CAAD,CAAX;AACH;AACJ,GAJQ,EAIN,CAAC7B,SAAD,EAAYF,KAAZ,CAJM,CAAT;AAMAJ,EAAAA,SAAS,CAAC,MAAM;AACZoC,IAAAA,OAAO,CAACC,GAAR,CAAY7B,QAAZ;AACH,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;AAIF,SACEJ,KAAK,CAACiB,MAAN,gBACA;AAAK,IAAA,SAAS,EAAEnB,MAAM,CAACoC,SAAvB;AAAA,4BACI;AAAQ,MAAA,OAAO,EAAE,MAAKF,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAtB;AAA+C,MAAA,SAAS,EAAEnC,MAAM,CAACqC,QAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,OAAO,EAAE,MAAKhC,YAAY,CAACD,SAAS,GAAG,CAAb,CAAlC;AAAmD,MAAA,SAAS,EAAEJ,MAAM,CAACsC,IAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAIQhC,QAAQ,CAACQ,GAAT,CAAa,CAACC,CAAD,EAAIL,KAAJ,kBACT;AAAO,MAAA,QAAQ,EAAGD,CAAD,IAAOD,aAAa,CAACC,CAAD,EAAIC,KAAJ;AAArC,OAAwDA,KAAxD;AAAA;AAAA;AAAA;AAAA,YADJ,CAJR,eAQI;AAAK,MAAA,GAAG,EAAER,KAAK,CAACE,SAAD,CAAL,CAAiBmC;AAA3B;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADA,gBAUS,qCAXX;AAaD,CA7DM;;GAAMtC,I;;KAAAA,I","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport styles from './styles.module.css';\r\n\r\nexport const Meme = () => {\r\n\r\n    const [memes, setMemes] = useState([]);\r\n    const [memeIndex, setMemeIndex] = useState(0);\r\n    const [captions, setCaptions] = useState([]);\r\n\r\n    const updateCaption = (e, index) => {\r\n        const text = e.target.value || '';\r\n        setCaptions(\r\n            captions.map((c, i) => {\r\n                if(index === i) {\r\n                    return text;\r\n                } else {\r\n                    return c;\r\n                }\r\n            })\r\n        );\r\n    };\r\n\r\n    const shuffleMemes = (array) => {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n          const j = Math.floor(Math.random() * i);\r\n          const temp = array[i];\r\n          array[i] = array[j];\r\n          array[j] = temp;\r\n        }\r\n      };    \r\n\r\n    useEffect(() => {\r\n        fetch('https://api.imgflip.com/get_memes').then(res => {\r\n            res.json().then(res => {\r\n                const _memes = res.data.memes;\r\n                shuffleMemes(_memes);\r\n                setMemes(_memes);\r\n            });\r\n        });\r\n    }, []); \r\n\r\n    useEffect(() => {\r\n        if(memes.length){\r\n            setCaptions(Array(memes[memeIndex].box_count).fill(''));\r\n        }\r\n    }, [memeIndex, memes]);\r\n\r\n    useEffect(() => {\r\n        console.log(captions);\r\n    }, [captions]);\r\n\r\n  return (\r\n    memes.length ? \r\n    <div className={styles.container}>\r\n        <button onClick={()=> console.log('GENERATE')} className={styles.generate}>Generate</button>\r\n        <button onClick={()=> setMemeIndex(memeIndex + 1)} className={styles.skip}>Skip</button>\r\n        {\r\n            captions.map((c, index) => (\r\n                <input onChange={(e) => updateCaption(e, index)} key = {index} />\r\n            ))\r\n        }\r\n        <img src={memes[memeIndex].url} />\r\n    </div> : <></> \r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}