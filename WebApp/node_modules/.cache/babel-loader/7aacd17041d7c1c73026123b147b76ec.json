{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\annma\\\\meme-gene\\\\src\\\\Meme\\\\Meme.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport styles from './styles.module.css';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Meme = () => {\n  _s();\n\n  const [memes, setMemes] = useState([]);\n  const [memeIndex, setMemeIndex] = useState(0);\n  const [captions, setCaptions] = useState([]);\n  const history = useHistory();\n\n  const updateCaption = (e, index) => {\n    const text = e.target.value || '';\n    setCaptions(captions.map((c, i) => {\n      if (index === i) {\n        return text;\n      } else {\n        return c;\n      }\n    }));\n  };\n\n  const generateMeme = () => {\n    const currentMeme = memes[memeIndex];\n    const formData = new FormData();\n    formData.append('username', 'AnnMaryEldo');\n    formData.append('password', 'memegene666');\n    formData.append('template_id', currentMeme.id);\n    captions.forEach((c, index) => formData.append(`boxes[${index}][text]`, c));\n    fetch('https://api.imgflip.com/caption_image', {\n      method: 'POST',\n      body: formData\n    }).then(res => {\n      res.json().then(res => {\n        console.log(res);\n      });\n    });\n  };\n\n  const shuffleMemes = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  useEffect(() => {\n    fetch('https://api.imgflip.com/get_memes').then(res => {\n      res.json().then(res => {\n        const _memes = res.data.memes;\n        shuffleMemes(_memes);\n        setMemes(_memes);\n      });\n    });\n  }, []);\n  useEffect(() => {\n    if (memes.length) {\n      setCaptions(Array(memes[memeIndex].box_count).fill(''));\n    }\n  }, [memeIndex, memes]);\n  return memes.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateMeme,\n      className: styles.generate,\n      children: \"Generate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setMemeIndex(memeIndex + 1),\n      className: styles.skip,\n      children: \"Skip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), captions.map((c, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => updateCaption(e, index)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: memes[memeIndex].url\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(Meme, \"mlplvTnx6LEPJ48oDrx4RFmpL1g=\", false, function () {\n  return [useHistory];\n});\n\n_c = Meme;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"sources":["C:/Users/annma/meme-gene/src/Meme/Meme.js"],"names":["React","useEffect","useState","styles","useHistory","Meme","memes","setMemes","memeIndex","setMemeIndex","captions","setCaptions","history","updateCaption","e","index","text","target","value","map","c","i","generateMeme","currentMeme","formData","FormData","append","id","forEach","fetch","method","body","then","res","json","console","log","shuffleMemes","array","length","j","Math","floor","random","temp","_memes","data","Array","box_count","fill","container","generate","skip","url"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport styles from './styles.module.css';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nexport const Meme = () => {\r\n\r\n    const [memes, setMemes] = useState([]);\r\n    const [memeIndex, setMemeIndex] = useState(0);\r\n    const [captions, setCaptions] = useState([]);\r\n\r\n    const history = useHistory();\r\n\r\n    const updateCaption = (e, index) => {\r\n        const text = e.target.value || '';\r\n        setCaptions(\r\n            captions.map((c, i) => {\r\n                if(index === i) {\r\n                    return text;\r\n                } else {\r\n                    return c;\r\n                }\r\n            })\r\n        );\r\n    };\r\n\r\n    const generateMeme = () => {\r\n        const currentMeme = memes[memeIndex];\r\n        const formData = new FormData();\r\n\r\n        formData.append('username', 'AnnMaryEldo');\r\n        formData.append('password', 'memegene666');\r\n        formData.append('template_id', currentMeme.id);\r\n        captions.forEach((c, index) => formData.append(`boxes[${index}][text]`, c));\r\n\r\n        fetch('https://api.imgflip.com/caption_image', {\r\n            method: 'POST', \r\n            body: formData\r\n        }).then(res => {\r\n            res.json().then(res => {\r\n                console.log(res);\r\n            });\r\n        });\r\n    };\r\n\r\n    const shuffleMemes = (array) => {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n          const j = Math.floor(Math.random() * i);\r\n          const temp = array[i];\r\n          array[i] = array[j];\r\n          array[j] = temp;\r\n        }\r\n      };    \r\n\r\n    useEffect(() => {\r\n        fetch('https://api.imgflip.com/get_memes').then(res => {\r\n            res.json().then(res => {\r\n                const _memes = res.data.memes;\r\n                shuffleMemes(_memes);\r\n                setMemes(_memes);\r\n            });\r\n        });\r\n    }, []); \r\n\r\n    useEffect(() => {\r\n        if(memes.length){\r\n            setCaptions(Array(memes[memeIndex].box_count).fill(''));\r\n        }\r\n    }, [memeIndex, memes]);\r\n\r\n  return (\r\n    memes.length ? \r\n    <div className={styles.container}>\r\n        <button onClick={generateMeme} className={styles.generate}>Generate</button>\r\n        <button onClick={()=> setMemeIndex(memeIndex + 1)} className={styles.skip}>Skip</button>\r\n        {\r\n            captions.map((c, index) => (\r\n                <input onChange={(e) => updateCaption(e, index)} key = {index} />\r\n            ))\r\n        }\r\n        <img src={memes[memeIndex].url} />\r\n    </div> : <></> \r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}