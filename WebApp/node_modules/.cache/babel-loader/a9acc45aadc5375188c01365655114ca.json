{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\annma\\\\meme-gene\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import React,{useEffect,useState}from'react';import styles from'./styles.module.css';import{useNavigate}from'react-router-dom';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export var Meme=function Meme(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),memes=_useState2[0],setMemes=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),memeIndex=_useState4[0],setMemeIndex=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),captions=_useState6[0],setCaptions=_useState6[1];var history=useNavigate();var updateCaption=function updateCaption(e,index){var text=e.target.value||'';setCaptions(captions.map(function(c,i){if(index===i){return text;}else{return c;}}));};var generateMeme=function generateMeme(){var currentMeme=memes[memeIndex];var formData=new FormData();formData.append('username','AnnMaryEldo');formData.append('password','memegene666');formData.append('template_id',currentMeme.id);captions.forEach(function(c,index){return formData.append(\"boxes[\".concat(index,\"][text]\"),c);});fetch('https://api.imgflip.com/caption_image',{method:'POST',body:formData}).then(function(res){res.json().then(function(res){history(\"/generated?url=\".concat(res.data.url));});});};var shuffleMemes=function shuffleMemes(array){for(var i=array.length-1;i>0;i--){var j=Math.floor(Math.random()*i);var temp=array[i];array[i]=array[j];array[j]=temp;}};useEffect(function(){fetch('https://api.imgflip.com/get_memes').then(function(res){res.json().then(function(res){var _memes=res.data.memes;shuffleMemes(_memes);setMemes(_memes);});});},[]);useEffect(function(){if(memes.length){setCaptions(Array(memes[memeIndex].box_count).fill(''));}},[memeIndex,memes]);return memes.length?/*#__PURE__*/_jsxs(\"div\",{className:styles.container,children:[captions.map(function(c,index){return/*#__PURE__*/_jsx(\"input\",{onChange:function onChange(e){return updateCaption(e,index);}},index);}),/*#__PURE__*/_jsx(\"button\",{onClick:generateMeme,className:styles.generate,children:\"Generate\"}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return setMemeIndex(memeIndex+1);},className:styles.skip,children:\"Skip\"}),/*#__PURE__*/_jsx(\"img\",{className:styles.imgcontainer,src:memes[memeIndex].url})]}):/*#__PURE__*/_jsx(_Fragment,{});};","map":{"version":3,"sources":["C:/Users/annma/meme-gene/src/Meme/Meme.js"],"names":["React","useEffect","useState","styles","useNavigate","Meme","memes","setMemes","memeIndex","setMemeIndex","captions","setCaptions","history","updateCaption","e","index","text","target","value","map","c","i","generateMeme","currentMeme","formData","FormData","append","id","forEach","fetch","method","body","then","res","json","data","url","shuffleMemes","array","length","j","Math","floor","random","temp","_memes","Array","box_count","fill","container","generate","skip","imgcontainer"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport styles from './styles.module.css';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport const Meme = () => {\r\n\r\n    const [memes, setMemes] = useState([]);\r\n    const [memeIndex, setMemeIndex] = useState(0);\r\n    const [captions, setCaptions] = useState([]);\r\n\r\n    const history = useNavigate();\r\n    \r\n    const updateCaption = (e, index) => {\r\n        const text = e.target.value || '';\r\n        setCaptions(\r\n            captions.map((c, i) => {\r\n                if(index === i) {\r\n                    return text;\r\n                } else {\r\n                    return c;\r\n                }\r\n            })\r\n        );\r\n    };\r\n\r\n    const generateMeme = () => {\r\n        const currentMeme = memes[memeIndex];\r\n        const formData = new FormData();\r\n\r\n        formData.append('username', 'AnnMaryEldo');\r\n        formData.append('password', 'memegene666');\r\n        formData.append('template_id', currentMeme.id);\r\n        captions.forEach((c, index) => formData.append(`boxes[${index}][text]`, c));\r\n\r\n        fetch('https://api.imgflip.com/caption_image', {\r\n            method: 'POST', \r\n            body: formData\r\n        }).then(res => {\r\n            res.json().then(res => {\r\n                history(`/generated?url=${res.data.url}`);\r\n            });\r\n        });\r\n    };\r\n\r\n\r\n    const shuffleMemes = (array) => {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n          const j = Math.floor(Math.random() * i);\r\n          const temp = array[i];\r\n          array[i] = array[j];\r\n          array[j] = temp;\r\n        }\r\n      };    \r\n\r\n    useEffect(() => {\r\n        fetch('https://api.imgflip.com/get_memes').then(res => {\r\n            res.json().then(res => {\r\n                const _memes = res.data.memes;\r\n                shuffleMemes(_memes);\r\n                setMemes(_memes);\r\n            });\r\n        });\r\n    }, []); \r\n\r\n    useEffect(() => {\r\n        if(memes.length){\r\n            setCaptions(Array(memes[memeIndex].box_count).fill(''));\r\n        }\r\n    }, [memeIndex, memes]);\r\n\r\n  return (\r\n    memes.length ? \r\n    <div className={styles.container}>\r\n        {\r\n            captions.map((c, index) => (\r\n                <input onChange={(e) => updateCaption(e, index)} key = {index} />\r\n            ))\r\n        }\r\n        <button onClick={generateMeme} className={styles.generate}>Generate</button>\r\n        <button onClick={()=> setMemeIndex(memeIndex + 1)} className={styles.skip}>Skip</button>    \r\n        <img className={styles.imgcontainer} src={memes[memeIndex].url} />\r\n    </div> : <></> \r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}